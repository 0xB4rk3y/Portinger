import socket
from datetime import datetime
from colorama import init, Fore, Style
import re


init(autoreset=True)


COPYRIGHT = "Â© 2024 Cengiz Berkay Kaya"
AUTHOR = "Cengiz Berkay Kaya"


COMMON_PORTS = [21, 22, 23, 25, 53, 80, 110, 123, 143, 161, 443, 445, 465, 587, 993, 995, 3306, 3389, 5432, 5900]


class Portinger:
    def __init__(self, target_ip, log_file=None):
        self.target_ip = target_ip
        self.log_file = log_file
        self.open_ports = []

    def is_valid_ip(self):
        pattern = re.compile(r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")
        return pattern.match(self.target_ip) is not None

    def scan_port(self, port):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(0.1)
                result = sock.connect_ex((self.target_ip, port))
                if result == 0:
                    self.open_ports.append(port)
                    print(f"{Fore.GREEN}[+] Port {port} is open{Style.RESET_ALL}")
        except socket.error:
            pass

    def scan(self):
        if not self.is_valid_ip():
            print(f"{Fore.RED}Invalid IP address. Please enter a correct IP address.{Style.RESET_ALL}")
            return

        print(f"{Fore.YELLOW}Starting scan on {self.target_ip}...{Style.RESET_ALL}\n")
        start_time = datetime.now()

        # Scan commonly used ports first
        for port in COMMON_PORTS:
            print(f"{Fore.CYAN}Scanning port {port}...{Style.RESET_ALL}")
            self.scan_port(port)

        # Scan remaining ports
        for port in range(1, 65536):
            if port not in COMMON_PORTS:
                print(f"{Fore.CYAN}Scanning port {port}...{Style.RESET_ALL}")
                self.scan_port(port)

        end_time = datetime.now()
        duration = end_time - start_time

        self._log_results()
        self._print_summary(duration)

    def _log_results(self):
        if self.log_file:
            with open(self.log_file, 'w') as file:
                for port in self.open_ports:
                    file.write(f"Port {port} is open\n")
                file.write(f"\nScan completed at {datetime.now()}\n")
                file.write(f"{COPYRIGHT}\n")
                file.write(f"Generated by Portinger\n")

    def _print_summary(self, duration):
        print(f"\n{Fore.CYAN}Scan completed in {duration}. {len(self.open_ports)} open ports found.{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}{COPYRIGHT}{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}Generated by Portinger{Style.RESET_ALL}")


if __name__ == "__main__":
    print(f"{Fore.BLUE}Welcome to Portinger - The Ultimate Port Scanner{Style.RESET_ALL}")
    print(f"{Fore.MAGENTA}{COPYRIGHT}{Style.RESET_ALL}")
    print(f"{Fore.MAGENTA}This tool is for legal purposes only. Unauthorized use is prohibited.{Style.RESET_ALL}\n")

    target_ip = input("Enter the IP address to scan: ").strip()
    log_choice = input("Do you want to save the scan results to a log file? (y/n): ").strip()

    log_file = None
    if log_choice.lower() == 'y':
        log_file = f"portinger_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"

    portinger = Portinger(target_ip, log_file)
    portinger.scan()
